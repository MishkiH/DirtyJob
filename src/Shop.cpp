#include "../include/Shop.hpp"
#include "../include/Console.hpp"
#include "../include/components/HasInventory.hpp"
#include "../include/components/HasStats.hpp"
#include <iostream>
#include <algorithm>

Shop::Shop() {
    initializeItems();
}

void Shop::initializeItems() {
    //–ø—Ä–æ–∫–∞—á–∫–∞
    items.emplace_back("AI-–ü–æ–º–æ—â–Ω–∏–∫ Echo", 
        "–£–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç—è—Ö –≤–æ –≤—Ä–µ–º—è –≤–∑–ª–æ–º–∞", 
        "Upgrade", 15, "permanent");
        
    items.emplace_back("–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∂–µ–ª–µ–∑–æ", 
        "–ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã —Å–æ–∫—Ä–∞—â–∞—é—Ç –≤—Ä–µ–º—è –≤–∑–ª–æ–º–∞ —Å 4 –¥–æ 2 —Ñ–∞–∑", 
        "Upgrade", 25, "permanent");
    
    //—Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏
    items.emplace_back("GhostKey", 
        "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª—é—á, –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç 1-2 —Ñ–∞–∑—ã –≤–∑–ª–æ–º–∞", 
        "Consumable", 8, "consumable");
        
    items.emplace_back("Kernel Reset v2", 
        "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ 30-50 –µ–¥–∏–Ω–∏—Ü", 
        "Consumable", 12, "consumable");
        
    items.emplace_back("Stealth Module", 
        "–°–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–π", 
        "Consumable", 10, "consumable");
}

void Shop::showInterface() {
    std::cout << Console::colorize("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n", Console::CYAN);
    std::cout << Console::colorize("‚ïë                          D-SHOP                              ‚ïë\n", Console::CYAN);
    std::cout << Console::colorize("‚ïë                   –ú–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤               ‚ïë\n", Console::CYAN);
    std::cout << Console::colorize("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n", Console::CYAN);
    
    displayItems();
    
    std::cout << "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n";
    std::cout << Console::colorize("/buy {–Ω–∞–∑–≤–∞–Ω–∏–µ}", Console::GREEN) << " - –∫—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç\n";
    std::cout << Console::colorize("/inventory", Console::GREEN) << " - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n";
    std::cout << Console::colorize("/switch main", Console::GREEN) << " - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n";
}

void Shop::displayItems() const {
    std::cout << "\n" << Console::colorize("üõí –¢–û–í–ê–†–´ –í –ù–ê–õ–ò–ß–ò–ò:", Console::YELLOW) << "\n\n";
    
    std::cout << Console::colorize("üìà –£–õ–£–ß–®–ï–ù–ò–Ø –ü–ï–†–°–û–ù–ê–ñ–ê:", Console::MAGENTA) << "\n";
    for (const auto& item : items) {
        if (item.category == "Upgrade") {
            std::cout << Console::colorize("  ‚Ä¢ ", Console::GREEN) << Console::colorize(item.name, Console::WHITE);
            std::cout << Console::colorize(" - " + std::to_string(item.price) + " ETH", Console::YELLOW) << "\n";
            std::cout << Console::colorize("    " + item.description, Console::GRAY) << "\n\n";
        }
    }
    
    std::cout << Console::colorize("‚ö° –†–ê–°–•–û–î–ù–´–ï –ú–ê–¢–ï–†–ò–ê–õ–´:", Console::BLUE) << "\n";
    for (const auto& item : items) {
        if (item.category == "Consumable") {
            std::cout << Console::colorize("  ‚Ä¢ ", Console::GREEN) << Console::colorize(item.name, Console::WHITE);
            std::cout << Console::colorize(" - " + std::to_string(item.price) + " ETH", Console::YELLOW) << "\n";
            std::cout << Console::colorize("    " + item.description, Console::GRAY) << "\n\n";
        }
    }
}

bool Shop::processCommand(const std::string& command, Entity& player) {
    if (command.substr(0, 5) == "/buy ") {
        std::string itemName = command.substr(5);
        return buyItem(itemName, player);
    }
    
    if (command == "/inventory") {
        auto inventory = player.getComponent<HasInventory>();
        if (inventory) {
            inventory->displayInventory();
        } else {
            std::cout << Console::colorize("–û—à–∏–±–∫–∞: –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n", Console::RED);
        }
        return true;
    }
    
    return false;
}

bool Shop::buyItem(const std::string& itemName, Entity& player) {
    //–Ω–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä
    auto it = std::find_if(items.begin(), items.end(),
        [&itemName](const ShopItem& item) { return item.name == itemName; });
    
    if (it == items.end()) {
        std::cout << Console::colorize("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n", Console::RED);
        return false;
    }
    
    const auto& item = *it;
    
    auto inventory = player.getComponent<HasInventory>();
    if (!inventory) {
        std::cout << Console::colorize("–û—à–∏–±–∫–∞: –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n", Console::RED);
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ–Ω–µ–≥
    if (!inventory->spendEthereum(item.price)) {
        std::cout << Console::colorize("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ " + std::to_string(item.price) + " ETH\n", Console::RED);
        std::cout << Console::colorize("–£ –≤–∞—Å: " + std::to_string(inventory->getEthereum()) + " ETH\n", Console::YELLOW);
        return false;
    }
    
    //–¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    Item newItem(item.name, item.description, item.type);
    inventory->addItem(newItem);
    
    std::cout << Console::colorize("‚ïê‚ïê‚ïê –ü–û–ö–£–ü–ö–ê –°–û–í–ï–†–®–ï–ù–ê ‚ïê‚ïê‚ïê\n", Console::GREEN);
    std::cout << Console::colorize("‚úÖ –ö—É–ø–ª–µ–Ω–æ: ", Console::GREEN) << Console::colorize(item.name, Console::CYAN) << "\n";
    std::cout << Console::colorize("üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ", Console::YELLOW) << item.price << " ETH\n";
    std::cout << Console::colorize("üí≥ –û—Å—Ç–∞—Ç–æ–∫: ", Console::YELLOW) << inventory->getEthereum() << " ETH\n";
    
    // –û—Å–æ–±—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    if (item.name == "AI-–ü–æ–º–æ—â–Ω–∏–∫ Echo") {
        std::cout << Console::colorize("\nü§ñ ECHO: \"–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\"\n", Console::BLUE);
    } else if (item.name == "Kernel Reset v2") {
        auto stats = player.getComponent<HasStats>();
        if (stats) {
            int healAmount = 35;
            stats->restoreHealth(healAmount);
            std::cout << Console::colorize("\nüíö –ó–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ " + std::to_string(healAmount) + " –µ–¥–∏–Ω–∏—Ü\n", Console::GREEN);
        }
    }
    
    return true;
}