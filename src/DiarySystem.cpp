#include "../include/DiarySystem.hpp"
#include "../include/Console.hpp"
#include "../include/components/HasStats.hpp"
#include <iostream>
#include <sstream>
#include <algorithm>

DiarySystem::DiarySystem() {
}

void DiarySystem::loadDiary() {
    generateDefaultEntries();
}

void DiarySystem::generateDefaultEntries() {
    entries.emplace_back(1, "Press Start", 
        "–ß–µ–≥–æ —Å—Ç–æ–∏—Ç –ø—Ä–∞–≤–¥–∞? –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–∞–π—Å, –∫–æ—Ç–æ—Ä—ã–π —è –±–µ—Ä—É –∑–∞ –∑–∞–∫–∞–∑—ã ‚Äì 2 –º–æ–Ω–µ—Ç–∫–∏ ETH. "
        "–≠—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å —á—å—é-—Ç–æ –∂–∏–∑–Ω—å –≤ –ª—É—á—à—É—é –∏–ª–∏ —Ö—É–¥—à—É—é —Å—Ç–æ—Ä–æ–Ω—É. –ú–Ω–µ –±–µ–∑—Ä–∞–∑–ª–∏—á–Ω–æ. –î–µ–Ω—å–≥–∏ –Ω–µ –ø–∞—Ö–Ω—É—Ç.\n\n"
        "–ê –ø—Ä–∞–≤–¥–∞?.. –ü—Ö–∞—Ö, –µ—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ê –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å. "
        "–Ø —Ä–µ—à–∏–ª –Ω–∞—á–∞—Ç—å –≤–µ—Å—Ç–∏ —ç—Ç–∏ –∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–∑–∞–ø—è—Ç–Ω–∞–Ω–Ω—ã–º.\n\n"
        "–ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –≤ –Ω–æ–≤–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–µ–º —è —Å—Ç–∞–Ω—É —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü?",
        "2024-01-15");
        
    entries.emplace_back(2, "–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑",
        "–°–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–∏–ª –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –ó–∞–º–µ–Ω–∞ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏ –¥–ª—è –∫–∞–∫–æ–π-—Ç–æ –≥—Ä—É–ø–ø—ã. "
        "–ö–∞–∑–∞–ª–æ—Å—å –±—ã, –µ—Ä—É–Ω–¥–∞ - –∫—Ç–æ –∑–∞–º–µ—Ç–∏—Ç –ø–∞—Ä—É –Ω–µ—Ç–æ—á–Ω—ã—Ö –Ω–æ—Ç? –ù–æ –¥–ª—è –Ω–∏—Ö —ç—Ç–æ –≤–æ–ø—Ä–æ—Å —Ä–µ–ø—É—Ç–∞—Ü–∏–∏.\n\n"
        "–°–º–µ—à–Ω–æ, –∫–∞–∫ –ª—é–¥–∏ —Ü–µ–ø–ª—è—é—Ç—Å—è –∑–∞ –∏–ª–ª—é–∑–∏—é —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞. –•–æ—Ç—è... —Ä–∞–∑–≤–µ —è –Ω–µ –¥–µ–ª–∞—é —Ç–æ –∂–µ —Å–∞–º–æ–µ? "
        "–°—Ç–∏—Ä–∞—é —Å–ª–µ–¥—ã, —Å–æ–∑–¥–∞—é –Ω–æ–≤—É—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å.\n\n"
        "3 ETH –∑–∞ –ø–æ–ª—á–∞—Å–∞ —Ä–∞–±–æ—Ç—ã. –ù–µ–ø–ª–æ—Ö–æ –¥–ª—è –Ω–∞—á–∞–ª–∞.",
        "2024-01-16");
        
    entries.emplace_back(3, "–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ –º–æ—Ä–∞–ª–∏",
        "–°–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–∏–ª –∑–∞–∫–∞–∑ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ù–∞–ª–æ–≥–æ–≤–∞—è —Å–ª—É–∂–±–∞, –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏... "
        "–ö–ª–∏–µ–Ω—Ç –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–æ '–Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–∞–≤–∫–∏'. –ù–æ —è –∂–µ –Ω–µ –¥—É—Ä–∞–∫.\n\n"
        "–í–æ–ø—Ä–æ—Å: –≥–¥–µ –≥—Ä–∞–Ω–∏—Ü–∞? –ö–æ–≥–¥–∞ –ø–æ–º–æ—â—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–æ—É—á–∞—Å—Ç–∏–µ–º? –ö–æ–≥–¥–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ "
        "–ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ?\n\n"
        "–ü–æ–∫–∞ —á—Ç–æ —è –ø—Ä–æ—Å—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Ç–æ, —á—Ç–æ –ø–µ—á–∞—Ç–∞—é—Ç. "
        "–ò–ª–∏ –Ω–µ—Å–µ—Ç?",
        "2024-01-17");
}

void DiarySystem::showInterface() {
    std::cout << Console::colorize("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n", Console::CYAN);
    std::cout << Console::colorize("‚ïë                           –î–ù–ï–í–ù–ò–ö                            ‚ïë\n", Console::CYAN);
    std::cout << Console::colorize("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n", Console::CYAN);
    
    displayEntryList();
    
    std::cout << "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n";
    std::cout << Console::colorize("/read {–Ω–æ–º–µ—Ä}", Console::GREEN) << " - –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–ø–∏—Å—å\n";
    std::cout << Console::colorize("/publish {–Ω–æ–º–µ—Ä}", Console::GREEN) << " - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å\n";
    std::cout << Console::colorize("/delete {–Ω–æ–º–µ—Ä}", Console::GREEN) << " - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å\n";
    std::cout << Console::colorize("/switch main", Console::GREEN) << " - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n";
}

void DiarySystem::displayEntryList() const {
    std::cout << "\n" << Console::colorize("üìù –ó–ê–ü–ò–°–ò –î–ù–ï–í–ù–ò–ö–ê:", Console::YELLOW) << "\n\n";
    
    for (const auto& entry : entries) {
        std::string status = entry.isPublished ? "üì¢" : "üìã";
        std::cout << status << Console::colorize(" –ó–∞–ø–∏—Å—å ‚Ññ" + std::to_string(entry.id), Console::WHITE);
        std::cout << Console::colorize(". ", Console::GRAY) << Console::colorize(entry.title, Console::YELLOW) << "\n";
        std::cout << Console::colorize("   –î–∞—Ç–∞: ", Console::GRAY) << entry.date << "\n\n";
    }
}

void DiarySystem::displayEntry(int id) const {
    auto it = std::find_if(entries.begin(), entries.end(),
        [id](const DiaryEntry& entry) { return entry.id == id; });
    
    if (it == entries.end()) {
        std::cout << Console::colorize("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n", Console::RED);
        return;
    }
    
    const auto& entry = *it;
    
    std::cout << Console::colorize("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n", Console::BLUE);
    std::cout << Console::colorize("–ó–∞–≥–æ–ª–æ–≤–æ–∫: ", Console::GRAY) << Console::colorize(entry.title, Console::YELLOW) << "\n";
    std::cout << Console::colorize("–î–∞—Ç–∞: ", Console::GRAY) << entry.date << "\n";
    std::cout << Console::colorize("–°—Ç–∞—Ç—É—Å: ", Console::GRAY) << (entry.isPublished ? Console::colorize("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ", Console::GREEN) : Console::colorize("–ß–µ—Ä–Ω–æ–≤–∏–∫", Console::YELLOW)) << "\n";
    std::cout << Console::colorize("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n", Console::BLUE);
    std::cout << "\n" << entry.content << "\n\n";
}

bool DiarySystem::processCommand(const std::string& command, Entity& player) {
    if (command.substr(0, 6) == "/read ") {
        int id = std::stoi(command.substr(6));
        displayEntry(id);
        return true;
    }
    
    if (command.substr(0, 9) == "/publish ") {
        int id = std::stoi(command.substr(9));
        return publishEntry(id, player);
    }
    
    if (command.substr(0, 8) == "/delete ") {
        int id = std::stoi(command.substr(8));
        
        auto it = std::find_if(entries.begin(), entries.end(),
            [id](const DiaryEntry& entry) { return entry.id == id; });
        
        if (it != entries.end()) {
            std::cout << Console::colorize("–ó–∞–ø–∏—Å—å '" + it->title + "' —É–¥–∞–ª–µ–Ω–∞.\n", Console::RED);
            
            // –í–ª–∏—è–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            auto stats = player.getComponent<HasStats>();
            if (stats) {
                stats->modifyPragmatism(3);
                stats->modifyCriticalThinking(-2);
                std::cout << Console::colorize("üìà –ü—Ä–∞–≥–º–∞—Ç–∏–∑–º +3, –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ -2\n", Console::BLUE);
            }
            
            entries.erase(it);
        } else {
            std::cout << Console::colorize("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n", Console::RED);
        }
        return true;
    }
    
    return false;
}

bool DiarySystem::publishEntry(int id, Entity& player) {
    auto it = std::find_if(entries.begin(), entries.end(),
        [id](DiaryEntry& entry) { return entry.id == id; });
    
    if (it == entries.end()) {
        std::cout << Console::colorize("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n", Console::RED);
        return false;
    }
    
    if (it->isPublished) {
        std::cout << Console::colorize("–ó–∞–ø–∏—Å—å —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.\n", Console::YELLOW);
        return true;
    }
    
    it->isPublished = true;
    
    std::cout << Console::colorize("‚ïê‚ïê‚ïê –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –ó–ê–ü–ò–°–ò ‚ïê‚ïê‚ïê\n", Console::YELLOW);
    std::cout << "–ó–∞–ø–∏—Å—å: " << Console::colorize(it->title, Console::CYAN) << "\n";
    std::cout << Console::colorize("‚úÖ –ó–∞–ø–∏—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ —Å–µ—Ç–∏\n", Console::GREEN);
    
    auto stats = player.getComponent<HasStats>();
    if (stats) {
        if (id == 1) { // "Press Start" - —Ü–∏–Ω–∏—á–Ω–∞—è –∑–∞–ø–∏—Å—å
            stats->modifyPragmatism(8);
            stats->modifyRebelSpirit(5);
            std::cout << Console::colorize("üìà –ü—Ä–∞–≥–º–∞—Ç–∏–∑–º +8, –ë—É–Ω—Ç–∞—Ä—Å–∫–∏–π –¥—É—Ö +5\n", Console::BLUE);
        } else if (id == 2) { // - —Ä–∞–∑–º—ã—à–ª—è–µ–º –æ —Ä–∞–±–æ—Ç–µ
            stats->modifyPragmatism(3);
            stats->modifyCriticalThinking(2);
            std::cout << Console::colorize("üìà –ü—Ä–∞–≥–º–∞—Ç–∏–∑–º +3, –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ +2\n", Console::BLUE);
        } else if (id == 3) { // - –≤–æ–ø—Ä–æ—Å—ã —ç—Ç–∏–∫–∏
            stats->modifyCriticalThinking(10);
            stats->modifyPragmatism(-5);
            stats->modifyRebelSpirit(-3);
            std::cout << Console::colorize("üìà –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ +10, –ü—Ä–∞–≥–º–∞—Ç–∏–∑–º -5, –ë—É–Ω—Ç–∞—Ä—Å–∫–∏–π –¥—É—Ö -3\n", Console::BLUE);
        }
    }
    return true;
}

void DiarySystem::addEntry(const DiaryEntry& entry) {
    entries.push_back(entry);
}